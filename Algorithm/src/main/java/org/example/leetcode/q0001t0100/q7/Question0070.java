package org.example.leetcode.q0001t0100.q7;

/**
 * @Author xz
 * @Date 2021/11/9 10:51
 * @Description TODO
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
 * <p>
 * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 * <p>
 * 注意：给定 n 是一个正整数。
 * <p>
 * 示例 1：
 * <p>
 * 输入： 2
 * 输出： 2
 * 解释： 有两种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶
 * 2.  2 阶
 * 示例 2：
 * <p>
 * 输入： 3
 * 输出： 3
 * 解释： 有三种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶 + 1 阶
 * 2.  1 阶 + 2 阶
 * 3.  2 阶 + 1 阶
 * Related Topics
 * 记忆化搜索
 * 数学
 * 动态规划
 */
public class Question0070 {
    // 爬楼梯主要需要了解一个关键点,爬到x层的解法是x-1和x-2的解法总和
    public int climbStairs(int n) {
        // 初始值为0,如果是1层,则返回1
        // 0层 0,0,1
        // 1层 0,1,1
        // 2层 1,1,2
        // 3层 1,2,3
        int p = 0, q = 0, r = 1;
        for (int i = 1; i <= n; ++i) {
            p = q;
            q = r;
            r = p + q;
        }
        return r;
    }
}
